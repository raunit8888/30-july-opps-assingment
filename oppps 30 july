{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c8270f8c-dcc9-4b8e-8450-64077a70f5bf",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Q1. Which function is used to open a file? What are the different modes of opening a file? Explain each mode\n",
    "#of file opening."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ff71888e-ddc1-483b-889a-5317cf55dbde",
   "metadata": {},
   "outputs": [],
   "source": [
    "In Python, the `open()` function is used to open a file. The function takes two primary arguments: the file name (or path) and the mode in which the file is to be opened. Here are the different modes of opening a file with examples:\n",
    "\n",
    "1. **Read Mode ('r')**:\n",
    "   - **Description**: Opens the file for reading. The file pointer is placed at the beginning of the file.\n",
    "   - **Example**:\n",
    "     ```python\n",
    "     with open('example.txt', 'r') as file:\n",
    "         content = file.read()\n",
    "         print(content)\n",
    "     ```\n",
    "\n",
    "2. **Write Mode ('w')**:\n",
    "   - **Description**: Opens the file for writing. If the file exists, its content is truncated. If the file does not exist, it creates a new file.\n",
    "   - **Example**:\n",
    "     ```python\n",
    "     with open('example.txt', 'w') as file:\n",
    "         file.write('Hello, world!')\n",
    "     ```\n",
    "\n",
    "3. **Append Mode ('a')**:\n",
    "   - **Description**: Opens the file for appending. The file pointer is at the end of the file if the file exists. If the file does not exist, it creates a new file.\n",
    "   - **Example**:\n",
    "     ```python\n",
    "     with open('example.txt', 'a') as file:\n",
    "         file.write('Appending text.')\n",
    "     ```\n",
    "\n",
    "4. **Read and Write Mode ('r+')**:\n",
    "   - **Description**: Opens the file for both reading and writing. The file pointer is placed at the beginning of the file.\n",
    "   - **Example**:\n",
    "     ```python\n",
    "     with open('example.txt', 'r+') as file:\n",
    "         content = file.read()\n",
    "         file.write('More content')\n",
    "     ```\n",
    "\n",
    "5. **Write and Read Mode ('w+')**:\n",
    "   - **Description**: Opens the file for both writing and reading. If the file exists, its content is truncated. If the file does not exist, it creates a new file.\n",
    "   - **Example**:\n",
    "     ```python\n",
    "     with open('example.txt', 'w+') as file:\n",
    "         file.write('Hello, world!')\n",
    "         file.seek(0)\n",
    "         content = file.read()\n",
    "         print(content)\n",
    "     ```\n",
    "\n",
    "6. **Append and Read Mode ('a+')**:\n",
    "   - **Description**: Opens the file for both appending and reading. The file pointer is at the end of the file if the file exists. If the file does not exist, it creates a new file.\n",
    "   - **Example**:\n",
    "     ```python\n",
    "     with open('example.txt', 'a+') as file:\n",
    "         file.write('Appending text.')\n",
    "         file.seek(0)\n",
    "         content = file.read()\n",
    "         print(content)\n",
    "     ```\n",
    "\n",
    "7. **Binary Read Mode ('rb')**:\n",
    "   - **Description**: Opens the file for reading in binary format. The file pointer is placed at the beginning of the file.\n",
    "   - **Example**:\n",
    "     ```python\n",
    "     with open('example.bin', 'rb') as file:\n",
    "         content = file.read()\n",
    "         print(content)\n",
    "     ```\n",
    "\n",
    "8. **Binary Write Mode ('wb')**:\n",
    "   - **Description**: Opens the file for writing in binary format. If the file exists, its content is truncated. If the file does not exist, it creates a new file.\n",
    "   - **Example**:\n",
    "     ```python\n",
    "     with open('example.bin', 'wb') as file:\n",
    "         file.write(b'Hello, world!')\n",
    "     ```\n",
    "\n",
    "9. **Binary Append Mode ('ab')**:\n",
    "   - **Description**: Opens the file for appending in binary format. The file pointer is at the end of the file if the file exists. If the file does not exist, it creates a new file.\n",
    "   - **Example**:\n",
    "     ```python\n",
    "     with open('example.bin', 'ab') as file:\n",
    "         file.write(b'Appending text.')\n",
    "     ```\n",
    "\n",
    "10. **Binary Read and Write Mode ('rb+')**:\n",
    "    - **Description**: Opens the file for both reading and writing in binary format. The file pointer is placed at the beginning of the file.\n",
    "    - **Example**:\n",
    "      ```python\n",
    "      with open('example.bin', 'rb+') as file:\n",
    "          content = file.read()\n",
    "          file.write(b'More content')\n",
    "      ```\n",
    "\n",
    "11. **Binary Write and Read Mode ('wb+')**:\n",
    "    - **Description**: Opens the file for both writing and reading in binary format. If the file exists, its content is truncated. If the file does not exist, it creates a new file.\n",
    "    - **Example**:\n",
    "      ```python\n",
    "      with open('example.bin', 'wb+') as file:\n",
    "          file.write(b'Hello, world!')\n",
    "          file.seek(0)\n",
    "          content = file.read()\n",
    "          print(content)\n",
    "      ```\n",
    "\n",
    "12. **Binary Append and Read Mode ('ab+')**:\n",
    "    - **Description**: Opens the file for both appending and reading in binary format. The file pointer is at the end of the file if the file exists. If the file does not exist, it creates a new file.\n",
    "    - **Example**:\n",
    "      ```python\n",
    "      with open('example.bin', 'ab+') as file:\n",
    "          file.write(b'Appending text.')\n",
    "          file.seek(0)\n",
    "          content = file.read()\n",
    "          print(content)\n",
    "      ```\n",
    "\n",
    "These examples illustrate how to open files in different modes using the `open()` function in Python. The `with` statement is used to ensure that the file is properly closed after its suite finishes, even if an exception is raised."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "40726092-993b-439c-ab71-77a4635e44ff",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Q2. Why close() function is used? Why is it important to close a file?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e72e0569-ff9e-494a-b5a6-78491840d5cb",
   "metadata": {},
   "outputs": [],
   "source": [
    "The `close()` function is used to close an open file in Python. It is an important function for several reasons:\n",
    "\n",
    "1. **Releasing Resources**: When a file is opened, the operating system allocates resources to keep it open. These resources include file handles and memory. If you don't close the file, these resources remain allocated, potentially leading to resource leaks and exhaustion.\n",
    "\n",
    "2. **Flushing Data**: When you write data to a file, it is often buffered in memory before being written to disk. Closing the file ensures that all buffered data is actually written to the disk. If you don't close the file, some of your data might remain in the buffer and not get saved properly.\n",
    "\n",
    "3. **Avoiding Data Corruption**: Closing a file ensures that all data operations are completed, and the file is properly updated. If a file is not closed, you might end up with incomplete writes or corrupt files.\n",
    "\n",
    "4. **File Locks**: Some operating systems use file locks to prevent multiple processes from writing to the same file simultaneously. Closing a file releases these locks, allowing other processes to access the file.\n",
    "\n",
    "5. **Best Practice**: Explicitly closing files is a good programming practice. It makes your code cleaner and more predictable, ensuring that resources are properly managed.\n",
    "\n",
    "Here is an example that demonstrates the use of the `close()` function:\n",
    "\n",
    "```python\n",
    "# Opening a file for writing\n",
    "file = open('example.txt', 'w')\n",
    "file.write('Hello, world!')\n",
    "\n",
    "# Closing the file\n",
    "file.close()\n",
    "```\n",
    "\n",
    "### Using `with` Statement\n",
    "\n",
    "Python provides a better way to handle files using the `with` statement. The `with` statement ensures that the file is properly closed after its suite finishes, even if an exception is raised. This approach is cleaner and more concise:\n",
    "\n",
    "```python\n",
    "with open('example.txt', 'w') as file:\n",
    "    file.write('Hello, world!')\n",
    "# No need to explicitly call close(), it is done automatically\n",
    "```\n",
    "\n",
    "Using the `with` statement is recommended because it makes the code more readable and helps avoid common errors related to file handling, such as forgetting to close the file."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "0ddfb437-7e90-4760-a5c7-3af67e528daf",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Q3. Write a python program to create a text file. Write ‘I want to become a Data Scientist’ in that file. Then\n",
    "#close the file. Open this file and read the content of the file."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "306952a3-830d-4fa1-a292-1210e83e199b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "content of the file :  i want to become a data scientist\n"
     ]
    }
   ],
   "source": [
    "# creating and writing to the file \n",
    "with open(\"data_scientist.txt\",'w')as file:\n",
    "    file.write(' i want to become a data scientist')\n",
    "    \n",
    "    \n",
    "    # readimmg from the file \n",
    "\n",
    "    \n",
    "with open('data_scientist.txt','r')as file:\n",
    "    content = file.read()\n",
    "    \n",
    "    print(\"content of the file :\",content)\n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "d93cb795-bf96-4ffd-8f0f-72284b0fceb8",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Q4. Explain the following with python code: read(), readline() and readlines()."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "e1538aef-498d-41f4-8ff4-8590b61f6f3d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "using read():\n",
      "using read():\n"
     ]
    }
   ],
   "source": [
    "# read \n",
    "with open ('example.txt','w') as file :\n",
    "        file.write('line\\n line 2\\n line 3')\n",
    "        \n",
    "with open('example.txt','r') as file :\n",
    "        content= ('using read():')\n",
    "        print(\"using read():\")\n",
    "        print(content)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "bc34d2a8-7b9c-4235-b88d-e8bef8c3d779",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "using readline():\n",
      "line\n",
      "i love playing cirket line2\n",
      "my name raunit line 3i percive my school in mzp "
     ]
    }
   ],
   "source": [
    "#read line \n",
    "with open ('example.txt','w') as file :\n",
    "    file.write('line\\n line2\\n line 3')\n",
    "    \n",
    "with open('example.txt','r')as file :\n",
    "          print(\"using readline():\")\n",
    "          line1 = file.readline()\n",
    "          print(line1,end='i love playing cirket')\n",
    "          line2 = file.readline()\n",
    "          print(line2,end='my name raunit')\n",
    "          line3 = file.readline()\n",
    "          \n",
    "          print(line3,end='i percive my school in mzp ')\n",
    "            "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "ad386627-7898-4c05-bda5-b3e3c9c20030",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "using readlines():\n",
      "line 1\n",
      " 2\n",
      "line 3"
     ]
    }
   ],
   "source": [
    "#read lines\n",
    "\n",
    "with open('example.txt', 'w') as file:\n",
    "          file.write('line 1\\n 2\\nline 3')\n",
    "with open(\"example.txt\",'r')as file :\n",
    "          lines = file.readlines()\n",
    "          print(\"using readlines():\")\n",
    "          for line in lines:\n",
    "            print(line,end='')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "13d6ac4b-a30d-4b60-b955-1bace621dac6",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Q5. Explain why with statement is used with open(). What is the advantage of using with statement and\n",
    "#open() together?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "af5228dc-7967-48ca-a538-3036ce42ca3c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "File closed using finally block.\n",
      "File automatically closed using with statement.\n"
     ]
    }
   ],
   "source": [
    "# Without using with statement\n",
    "try:\n",
    "    file = open('example.txt', 'w')\n",
    "    file.write('Hello, world!')\n",
    "finally:\n",
    "    file.close()\n",
    "    print(\"File closed using finally block.\")\n",
    "\n",
    "# Using with statement\n",
    "with open('example.txt', 'w') as file:\n",
    "    file.write('Hello, world!')\n",
    "print(\"File automatically closed using with statement.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "d2e8b644-624a-467b-a99d-8bd095cd9bd5",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Q6. Explain the write() and writelines() functions. Give a suitable example."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "6bc59b8d-41c2-450a-a2d0-89610d171406",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Content of the file using write():\n",
      "Hello, world!\n",
      "This is a new line.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Using write() to write a single string to a file\n",
    "with open('example.txt', 'w') as file:\n",
    "    file.write('Hello, world!\\n')\n",
    "    file.write('This is a new line.\\n')\n",
    "\n",
    "# Reading the file to verify the content\n",
    "with open('example.txt', 'r') as file:\n",
    "    content = file.read()\n",
    "    print(\"Content of the file using write():\")\n",
    "    print(content)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8f7389b7-5092-4d51-9989-9799bc0d6cd1",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
